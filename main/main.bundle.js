(()=>{"use strict";var n={800:(n,e,t)=>{t.d(e,{Z:()=>C});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),c=t(667),s=t.n(c),u=new URL(t(790),t.b),A=new URL(t(373),t.b),d=new URL(t(516),t.b),l=new URL(t(82),t.b),f=new URL(t(837),t.b),p=a()(r()),g=s()(u),m=s()(A),v=s()(d),h=s()(l),b=s()(f);p.push([n.id,":root {\n  --accent-color: rgb(240, 68, 5);\n  --accent-dark-color: rgb(140, 39, 3);\n  --error-color: #b3261e;\n  --font-family: 'Fira Mono', monospace;\n  --font-family-consolas: Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  margin: 0px;\n  padding: 0px;\n  background-color: #f2f2f7;\n  color: #000;\n  font-size: 14px;\n  position: relative;\n  overflow-x: hidden;\n  font-weight: 400;\n  font-family: var(--font-family);\n  padding-bottom: 24px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  width: calc(100% - 128px);\n  max-width: 1536px;\n  margin: 0 auto;\n}\n\n.medium-container {\n  width: calc(100% - 32px);\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n#navbar {\n  width: 100%;\n  height: 96px;\n  background-color: #fff;\n}\n\n#navbar a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#navbar .container {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n#navbar-chevron {\n  width: 24px;\n  height: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url("+g+");\n  opacity: 0.2;\n  margin-left: 8px;\n}\n\n#navbar .logo-ref {\n  width: max-content;\n}\n\n#navbar .logo {\n  width: 196px;\n  margin-top: 2px;\n}\n\n@media only screen and (max-width: 700px) {\n  #navbar {\n    height: auto;\n  }\n\n  #navbar .container {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #navbar .logo-ref {\n    margin-top: 32px;\n  }\n\n  #navbar .logo {\n    margin-top: 0;\n    width: 256px;\n  }\n\n  #navbar #navbar-chevron {\n    transform: rotate(90deg);\n  }\n\n  #navbar #playground-actions {\n    margin-left: 0;\n    margin: 32px 0px;\n  }\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.github-card {\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  user-select: none;\n  padding: 8px;\n}\n\n.github-card:hover {\n  background-color: rgba(0, 0, 0, 0.06);\n  transition: 0.15s;\n}\n\n.github-card:active,\n.github-card:focus {\n  background-color: rgba(0, 0, 0, 0.12);\n  transition: 0.15s;\n}\n\n.github-card::before {\n  display: block;\n  content: '';\n  width: 32px;\n  height: 32px;\n  background-image: url("+m+");\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  margin-right: 4px;\n}\n\n#playground-actions {\n  display: flex;\n  align-items: center;\n  column-gap: 16px;\n  margin-left: auto;\n}\n\n.button {\n  width: fit-content;\n  height: fit-content;\n  padding: 12px 20px;\n  border-radius: 6px;\n  outline: none;\n  margin: none;\n  border: none;\n  font-size: 14px;\n  font-family: var(--font-family);\n  transition: 0.15s background-color;\n  font-weight: 600;\n}\n\n.orange-button {\n  background-color: var(--accent-color);\n  color: #fff;\n  border: 2px solid transparent;\n}\n\n.orange-button-outlined {\n  border: 2px solid var(--accent-color);\n  color: var(--accent-color);\n  background-color: transparent;\n}\n\n.orange-button:hover,\n.orange-button:active,\n.orange-button:focus {\n  background-color: var(--accent-dark-color);\n}\n\n.orange-button-outlined:hover,\n.orange-button-outlined:active,\n.orange-button-outlined:focus {\n  background-color: rgba(240, 68, 5, 0.12);\n}\n\n.content-card {\n  overflow: hidden;\n}\n\n.content-card-header {\n  font-size: 20px;\n  font-weight: 600;\n  padding: var(--content-card-padding);\n}\n\n#result {\n  overflow: hidden;\n  margin: 96px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  --bot-icon-color: #4caf50;\n  --bot-icon-url: url("+v+");\n}\n\n.result-detected {\n  --bot-icon-color: #f44336 !important;\n  --bot-icon-url: url("+h+") !important;\n}\n\n.result-error {\n  --bot-icon-color: var(--error-color) !important;\n  --bot-icon-url: url("+b+") !important;\n}\n\n.result-bot-icon-container {\n  width: 128px;\n  height: 128px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.result-bot-icon-container::before {\n  content: '';\n  display: block;\n  background-color: var(--bot-icon-color);\n  opacity: 0.08;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  border-radius: 100%;\n  transition: 0.2s background-color;\n}\n\n.result-bot-icon {\n  width: 52px;\n  height: 52px;\n  mask-image: var(--bot-icon-url);\n  -webkit-mask-image: var(--bot-icon-url);\n  mask-size: 100%;\n  mask-repeat: no-repeat;\n  mask-position: center;\n  background-color: var(--bot-icon-color);\n  position: relative;\n  transition: 0.2s mask-image, 0.2s -webkit-mask-image, 0.2s background-color;\n}\n\n#result-text {\n  margin-top: 24px;\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--bot-icon-color);\n  transition: 0.2s color;\n}\n\n.logs-content {\n  background-color: #282c34;\n  color: #fff;\n  border-radius: 12px;\n  padding: 24px;\n  margin-top: 12px;\n  font-family: var(--font-family-consolas);\n}\n\n.logs-buttons-list {\n  display: flex;\n  margin-left: auto;\n}\n\n.logs-top-bar {\n  display: flex;\n  align-items: center;\n}\n\n.logs-section:not(:first-child) {\n  margin-top: 24px;\n}\n\n.logs-section-header {\n  color: var(--accent-color);\n  font-size: 14px;\n}\n\n.logs-section-content {\n  font-size: 12px;\n  margin-top: 1em;\n  white-space: pre-wrap;\n}\n\n#error-container {\n  margin-bottom: 96px;\n  padding: 24px;\n  border: 2px solid var(--error-color);\n  border-radius: 12px;\n  font-family: var(--font-family-consolas);\n  font-size: 14px;\n  line-height: 2;\n  display: none;\n}\n\n.error-container-visible {\n  display: block !important;\n}\n","",{version:3,sources:["webpack://./playground/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n  --accent-color: rgb(240, 68, 5);\n  --accent-dark-color: rgb(140, 39, 3);\n  --error-color: #b3261e;\n  --font-family: 'Fira Mono', monospace;\n  --font-family-consolas: Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  margin: 0px;\n  padding: 0px;\n  background-color: #f2f2f7;\n  color: #000;\n  font-size: 14px;\n  position: relative;\n  overflow-x: hidden;\n  font-weight: 400;\n  font-family: var(--font-family);\n  padding-bottom: 24px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  width: calc(100% - 128px);\n  max-width: 1536px;\n  margin: 0 auto;\n}\n\n.medium-container {\n  width: calc(100% - 32px);\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n#navbar {\n  width: 100%;\n  height: 96px;\n  background-color: #fff;\n}\n\n#navbar a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#navbar .container {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n#navbar-chevron {\n  width: 24px;\n  height: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url(../resources/chevron_right.svg);\n  opacity: 0.2;\n  margin-left: 8px;\n}\n\n#navbar .logo-ref {\n  width: max-content;\n}\n\n#navbar .logo {\n  width: 196px;\n  margin-top: 2px;\n}\n\n@media only screen and (max-width: 700px) {\n  #navbar {\n    height: auto;\n  }\n\n  #navbar .container {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #navbar .logo-ref {\n    margin-top: 32px;\n  }\n\n  #navbar .logo {\n    margin-top: 0;\n    width: 256px;\n  }\n\n  #navbar #navbar-chevron {\n    transform: rotate(90deg);\n  }\n\n  #navbar #playground-actions {\n    margin-left: 0;\n    margin: 32px 0px;\n  }\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.github-card {\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  user-select: none;\n  padding: 8px;\n}\n\n.github-card:hover {\n  background-color: rgba(0, 0, 0, 0.06);\n  transition: 0.15s;\n}\n\n.github-card:active,\n.github-card:focus {\n  background-color: rgba(0, 0, 0, 0.12);\n  transition: 0.15s;\n}\n\n.github-card::before {\n  display: block;\n  content: '';\n  width: 32px;\n  height: 32px;\n  background-image: url(../resources/github_icon.svg);\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  margin-right: 4px;\n}\n\n#playground-actions {\n  display: flex;\n  align-items: center;\n  column-gap: 16px;\n  margin-left: auto;\n}\n\n.button {\n  width: fit-content;\n  height: fit-content;\n  padding: 12px 20px;\n  border-radius: 6px;\n  outline: none;\n  margin: none;\n  border: none;\n  font-size: 14px;\n  font-family: var(--font-family);\n  transition: 0.15s background-color;\n  font-weight: 600;\n}\n\n.orange-button {\n  background-color: var(--accent-color);\n  color: #fff;\n  border: 2px solid transparent;\n}\n\n.orange-button-outlined {\n  border: 2px solid var(--accent-color);\n  color: var(--accent-color);\n  background-color: transparent;\n}\n\n.orange-button:hover,\n.orange-button:active,\n.orange-button:focus {\n  background-color: var(--accent-dark-color);\n}\n\n.orange-button-outlined:hover,\n.orange-button-outlined:active,\n.orange-button-outlined:focus {\n  background-color: rgba(240, 68, 5, 0.12);\n}\n\n.content-card {\n  overflow: hidden;\n}\n\n.content-card-header {\n  font-size: 20px;\n  font-weight: 600;\n  padding: var(--content-card-padding);\n}\n\n#result {\n  overflow: hidden;\n  margin: 96px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  --bot-icon-color: #4caf50;\n  --bot-icon-url: url(../resources/robot-off-outline.svg);\n}\n\n.result-detected {\n  --bot-icon-color: #f44336 !important;\n  --bot-icon-url: url(../resources/robot-outline.svg) !important;\n}\n\n.result-error {\n  --bot-icon-color: var(--error-color) !important;\n  --bot-icon-url: url(../resources/alert-circle-outline.svg) !important;\n}\n\n.result-bot-icon-container {\n  width: 128px;\n  height: 128px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.result-bot-icon-container::before {\n  content: '';\n  display: block;\n  background-color: var(--bot-icon-color);\n  opacity: 0.08;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  border-radius: 100%;\n  transition: 0.2s background-color;\n}\n\n.result-bot-icon {\n  width: 52px;\n  height: 52px;\n  mask-image: var(--bot-icon-url);\n  -webkit-mask-image: var(--bot-icon-url);\n  mask-size: 100%;\n  mask-repeat: no-repeat;\n  mask-position: center;\n  background-color: var(--bot-icon-color);\n  position: relative;\n  transition: 0.2s mask-image, 0.2s -webkit-mask-image, 0.2s background-color;\n}\n\n#result-text {\n  margin-top: 24px;\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--bot-icon-color);\n  transition: 0.2s color;\n}\n\n.logs-content {\n  background-color: #282c34;\n  color: #fff;\n  border-radius: 12px;\n  padding: 24px;\n  margin-top: 12px;\n  font-family: var(--font-family-consolas);\n}\n\n.logs-buttons-list {\n  display: flex;\n  margin-left: auto;\n}\n\n.logs-top-bar {\n  display: flex;\n  align-items: center;\n}\n\n.logs-section:not(:first-child) {\n  margin-top: 24px;\n}\n\n.logs-section-header {\n  color: var(--accent-color);\n  font-size: 14px;\n}\n\n.logs-section-content {\n  font-size: 12px;\n  margin-top: 1em;\n  white-space: pre-wrap;\n}\n\n#error-container {\n  margin-bottom: 96px;\n  padding: 24px;\n  border: 2px solid var(--error-color);\n  border-radius: 12px;\n  font-family: var(--font-family-consolas);\n  font-size: 14px;\n  line-height: 2;\n  display: none;\n}\n\n.error-container-visible {\n  display: block !important;\n}\n"],sourceRoot:""}]);const C=p},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<n.length;u++){var A=[].concat(n[u]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],u=o.base?s[0]+o.base:s[0],A=i[u]||0,d="".concat(u," ").concat(A);i[u]=A+1;var l=t(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)e[l].references++,e[l].updater(f);else{var p=r(f,o);o.byIndex=c,e.splice(c,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=o(n,r),u=0;u<i.length;u++){var A=t(i[u]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},837:(n,e,t)=>{n.exports=t.p+"bf468b98f99fe3cb600c.svg"},790:(n,e,t)=>{n.exports=t.p+"cb3e629604702ef8bc66.svg"},373:(n,e,t)=>{n.exports=t.p+"550985caaa8859d4b95f.svg"},516:(n,e,t)=>{n.exports=t.p+"80392182d321c655d4d0.svg"},82:(n,e,t)=>{n.exports=t.p+"52d88d31d700c20dcc04.svg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};function e(n,e,t,o){return new(t||(t=Promise))((function(r,i){function a(n){try{s(o.next(n))}catch(n){i(n)}}function c(n){try{s(o.throw(n))}catch(n){i(n)}}function s(n){var e;n.done?r(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,c)}s((o=o.apply(n,e||[])).next())}))}function o(n,e){var t,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(t=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,o=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){a.label=c[1];break}if(6===c[0]&&a.label<r[1]){a.label=r[1],r=c;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(c);break}r[2]&&a.ops.pop(),a.trys.pop();continue}c=e.call(n,a)}catch(n){c=[6,n],o=0}finally{t=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function r(n,e,t){if(t||2===arguments.length)for(var o,r=0,i=e.length;r<i;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return n.concat(o||Array.prototype.slice.call(e))}Object.create,Object.create;const i={i8:"1.6.0"};var a,c;!function(n){n[n.Success=0]="Success",n[n.Undefined=-1]="Undefined",n[n.NotFunction=-2]="NotFunction",n[n.UnexpectedBehaviour=-3]="UnexpectedBehaviour",n[n.Null=-4]="Null"}(a||(a={})),function(n){n.Awesomium="awesomium",n.Cef="cef",n.CefSharp="cefsharp",n.CoachJS="coachjs",n.Electron="electron",n.FMiner="fminer",n.Geb="geb",n.NightmareJS="nightmarejs",n.Phantomas="phantomas",n.PhantomJS="phantomjs",n.Rhino="rhino",n.Selenium="selenium",n.Sequentum="sequentum",n.SlimerJS="slimerjs",n.WebDriverIO="webdriverio",n.WebDriver="webdriver",n.HeadlessChrome="headless_chrome",n.Unknown="unknown"}(c||(c={}));var s,u,A=function(e){function t(n,o){var r=e.call(this,o)||this;return r.state=n,r.name="BotdError",Object.setPrototypeOf(r,t.prototype),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}(t,e),t}(Error);function d(n,e){return-1!==n.indexOf(e)}function l(n,e){return-1!==n.indexOf(e)}function f(n){return Object.getOwnPropertyNames(n)}function p(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];for(var o=function(e){if("string"==typeof e){if(d(n,e))return{value:!0}}else if(null!=function(n,e){if("find"in n)return n.find(e);for(var t=0;t<n.length;t++)if(e(n[t]))return n[t]}(n,(function(n){return e.test(n)})))return{value:!0}},r=0,i=e;r<i.length;r++){var a=o(i[r]);if("object"==typeof a)return a.value}return!1}function g(n){return n.reduce((function(n,e){return n+(e?1:0)}),0)}function m(){var n,e,t=window,o=navigator;return g(["webkitPersistentStorage"in o,"webkitTemporaryStorage"in o,0===o.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in t,"BatteryManager"in t,"webkitMediaStream"in t,"webkitSpeechGrammar"in t])>=5?s.Chromium:g(["ApplePayError"in t,"CSSPrimitiveValue"in t,"Counter"in t,0===o.vendor.indexOf("Apple"),"getStorageUpdates"in o,"WebKitMediaKeys"in t])>=4?s.Webkit:g(["buildID"in navigator,"MozAppearance"in(null!==(e=null===(n=document.documentElement)||void 0===n?void 0:n.style)&&void 0!==e?e:{}),"onmozfullscreenchange"in t,"mozInnerScreenX"in t,"CSSMozDocumentRule"in t,"CanvasCaptureMediaStream"in t])>=4?s.Gecko:s.Unknown}function v(){var n,e=null===(n=navigator.userAgent)||void 0===n?void 0:n.toLowerCase();return l(e,"wechat")?u.WeChat:l(e,"firefox")?u.Firefox:l(e,"opera")||l(e,"opr")?u.Opera:l(e,"chrome")?u.Chrome:l(e,"safari")?u.Safari:l(e,"trident")||l(e,"msie")?u.IE:u.Unknown}function h(){var n=m(),e=n===s.Chromium,t=n===s.Gecko;if(!e&&!t)return!1;var o=window;return g(["onorientationchange"in o,"orientation"in o,e&&!("SharedWorker"in o),t&&/android/i.test(navigator.appVersion)])>=2}function b(){if(m()!==s.Webkit)return!1;var n=window;return g(["safari"in n,!("DeviceMotionEvent"in n),!("ongestureend"in n),!("standalone"in navigator)])>=3}function C(){if(void 0===window.CSS)throw new A(a.Undefined,"window.CSS is undefined");return CSS.supports("-moz-appearance","auto")}function E(){return void 0!==document.hasFocus&&document.hasFocus()}!function(n){n.Unknown="unknown",n.Chromium="chromium",n.Gecko="gecko",n.Webkit="webkit"}(s||(s={})),function(n){n.Unknown="unknown",n.Chrome="chrome",n.Firefox="firefox",n.Opera="opera",n.Safari="safari",n.IE="internet_explorer",n.WeChat="wechat"}(u||(u={}));var w={detectAppVersion:function(n){var e=n.appVersion;return e.state===a.Success&&(/headless/i.test(e.value)?c.HeadlessChrome:/electron/i.test(e.value)?c.Electron:/slimerjs/i.test(e.value)?c.SlimerJS:void 0)},detectDocumentAttributes:function(n){var e=n.documentElementKeys;return e.state===a.Success&&(p(e.value,"selenium","webdriver","driver")?c.Selenium:void 0)},detectErrorTrace:function(n){var e=n.errorTrace;return e.state===a.Success&&(/PhantomJS/i.test(e.value)?c.PhantomJS:void 0)},detectEvalLengthInconsistency:function(n){var e=n.evalLength;if(e.state===a.Success){var t=e.value,o=v(),r=m();return 37===t&&!d([s.Webkit,s.Gecko],r)||39===t&&!d([u.IE],o)||33===t&&!d([s.Chromium],r)}},detectFunctionBind:function(n){if(n.functionBind.state===a.NotFunction)return c.PhantomJS},detectLanguagesLengthInconsistency:function(n){var e=n.languages;if(e.state===a.Success&&0===e.value.length)return c.HeadlessChrome},detectNotificationPermissions:function(n){var e=n.notificationPermissions;return v()===u.Chrome&&(e.state===a.Success&&e.value?c.HeadlessChrome:void 0)},detectPluginsArray:function(n){var e=n.pluginsArray;if(e.state===a.Success&&!e.value)return c.HeadlessChrome},detectPluginsLengthInconsistency:function(n){var e=n.pluginsLength;if(e.state===a.Success){var t=m();if(!(t===s.Chromium&&h()||t===s.Webkit&&!b()))return 0===e.value?c.HeadlessChrome:void 0}},detectProcess:function(n){var e,t=n.process;return t.state===a.Success&&("renderer"===t.value.type||null!=(null===(e=t.value.versions)||void 0===e?void 0:e.electron)?c.Electron:void 0)},detectUserAgent:function(n){var e=n.userAgent;return e.state===a.Success&&(/PhantomJS/i.test(e.value)?c.PhantomJS:/Headless/i.test(e.value)?c.HeadlessChrome:/Electron/i.test(e.value)?c.Electron:/slimerjs/i.test(e.value)?c.SlimerJS:void 0)},detectWebDriver:function(n){var e=n.webDriver;if(e.state===a.Success&&e.value)return c.HeadlessChrome},detectWebGL:function(n){var e=n.webGL;if(e.state===a.Success){var t=e.value,o=t.vendor,r=t.renderer;if("Brian Paul"==o&&"Mesa OffScreen"==r)return c.HeadlessChrome}},detectWindowExternal:function(n){var e=n.windowExternal;return e.state===a.Success&&(/Sequentum/i.test(e.value)?c.Sequentum:void 0)},detectWindowSize:function(n){var e=n.windowSize;if(e.state!==a.Success)return!1;var t=e.value,o=t.outerWidth,r=t.outerHeight;return E()&&0===o&&0===r?c.HeadlessChrome:void 0},detectMimeTypesConsistent:function(n){var e=n.mimeTypesConsistent;if(e.state===a.Success&&!e.value)return c.Unknown},detectProductSub:function(n){var e=n.productSub;if(e.state!==a.Success)return!1;var t=v();return t!==u.Chrome&&t!==u.Safari&&t!==u.Opera&&t!==u.WeChat||"20030107"===e.value?void 0:c.Unknown},detectDistinctiveProperties:function(n){var e=n.distinctiveProps;if(e.state!==a.Success)return!1;var t,o=e.value;for(t in o)if(o[t])return t}},B={userAgent:function(){return navigator.userAgent},appVersion:function(){var n=navigator.appVersion;if(null==n)throw new A(a.Undefined,"navigator.appVersion is undefined");return n},rtt:function(){if(void 0===navigator.connection)throw new A(a.Undefined,"navigator.connection is undefined");if(void 0===navigator.connection.rtt)throw new A(a.Undefined,"navigator.connection.rtt is undefined");return navigator.connection.rtt},windowSize:function(){return{outerWidth:window.outerWidth,outerHeight:window.outerHeight,innerWidth:window.innerWidth,innerHeight:window.innerHeight}},pluginsLength:function(){if(void 0===navigator.plugins)throw new A(a.Undefined,"navigator.plugins is undefined");if(void 0===navigator.plugins.length)throw new A(a.UnexpectedBehaviour,"navigator.plugins.length is undefined");return navigator.plugins.length},pluginsArray:function(){if(void 0===navigator.plugins)throw new A(a.Undefined,"navigator.plugins is undefined");if(void 0===window.PluginArray)throw new A(a.Undefined,"window.PluginArray is undefined");return navigator.plugins instanceof PluginArray},errorTrace:function(){try{null[0]()}catch(n){if(n instanceof Error&&null!=n.stack)return n.stack.toString()}throw new A(a.UnexpectedBehaviour,"errorTrace signal unexpected behaviour")},productSub:function(){var n=navigator.productSub;if(void 0===n)throw new A(a.Undefined,"navigator.productSub is undefined");return n},windowExternal:function(){if(void 0===window.external)throw new A(a.Undefined,"window.external is undefined");var n=window.external;if("function"!=typeof n.toString)throw new A(a.NotFunction,"window.external.toString is not a function");return n.toString()},mimeTypesConsistent:function(){if(void 0===navigator.mimeTypes)throw new A(a.Undefined,"navigator.mimeTypes is undefined");for(var n=navigator.mimeTypes,e=Object.getPrototypeOf(n)===MimeTypeArray.prototype,t=0;t<n.length;t++)e&&(e=Object.getPrototypeOf(n[t])===MimeType.prototype);return e},evalLength:function(){return eval.toString().length},webGL:function(){var n=document.createElement("canvas");if("function"!=typeof n.getContext)throw new A(a.NotFunction,"HTMLCanvasElement.getContext is not a function");var e=n.getContext("webgl");if(null===e)throw new A(a.Null,"WebGLRenderingContext is null");if("function"!=typeof e.getParameter)throw new A(a.NotFunction,"WebGLRenderingContext.getParameter is not a function");return{vendor:e.getParameter(e.VENDOR),renderer:e.getParameter(e.RENDERER)}},webDriver:function(){if(null==navigator.webdriver)throw new A(a.Undefined,"navigator.webdriver is undefined");return navigator.webdriver},languages:function(){var n,e=navigator,t=[],o=e.language||e.userLanguage||e.browserLanguage||e.systemLanguage;if(void 0!==o&&t.push([o]),Array.isArray(e.languages))m()===s.Chromium&&g([!("MediaSettingsRange"in(n=window)),"RTCEncodedAudioFrame"in n,""+n.Intl=="[object Intl]",""+n.Reflect=="[object Reflect]"])>=3||t.push(e.languages);else if("string"==typeof e.languages){var r=e.languages;r&&t.push(r.split(","))}return t},notificationPermissions:function(){return e(this,void 0,void 0,(function(){var n,e;return o(this,(function(t){switch(t.label){case 0:if(void 0===window.Notification)throw new A(a.Undefined,"window.Notification is undefined");if(void 0===navigator.permissions)throw new A(a.Undefined,"navigator.permissions is undefined");if("function"!=typeof(n=navigator.permissions).query)throw new A(a.NotFunction,"navigator.permissions.query is not a function");t.label=1;case 1:return t.trys.push([1,3,,4]),[4,n.query({name:"notifications"})];case 2:return e=t.sent(),[2,"denied"===window.Notification.permission&&"prompt"===e.state];case 3:throw t.sent(),new A(a.UnexpectedBehaviour,"notificationPermissions signal unexpected behaviour");case 4:return[2]}}))}))},documentElementKeys:function(){if(void 0===document.documentElement)throw new A(a.Undefined,"document.documentElement is undefined");var n=document.documentElement;if("function"!=typeof n.getAttributeNames)throw new A(a.NotFunction,"document.documentElement.getAttributeNames is not a function");return n.getAttributeNames()},functionBind:function(){if(void 0===Function.prototype.bind)throw new A(a.NotFunction,"Function.prototype.bind is undefined");return Function.prototype.bind.toString()},process:function(){if(void 0===window.process)throw new A(a.Undefined,"window.process is undefined");return window.process},distinctiveProps:function(){var n,e,t=((n={})[c.Awesomium]={window:["awesomium"]},n[c.Cef]={window:["RunPerfTest"]},n[c.CefSharp]={window:["CefSharp"]},n[c.CoachJS]={window:["emit"]},n[c.FMiner]={window:["fmget_targets"]},n[c.Geb]={window:["geb"]},n[c.NightmareJS]={window:["__nightmare","nightmare"]},n[c.Phantomas]={window:["__phantomas"]},n[c.PhantomJS]={window:["callPhantom","_phantom"]},n[c.Rhino]={window:["spawn"]},n[c.Selenium]={window:["_Selenium_IDE_Recorder","_selenium","calledSelenium",/^([a-z]){3}_.*_(Array|Promise|Symbol)$/],document:["__selenium_evaluate","selenium-evaluate","__selenium_unwrapped"]},n[c.WebDriverIO]={window:["wdioElectron"]},n[c.WebDriver]={window:["webdriver","__webdriverFunc","__lastWatirAlert","__lastWatirConfirm","__lastWatirPrompt","_WEBDRIVER_ELEM_CACHE","ChromeDriverw"],document:["__webdriver_script_fn","__driver_evaluate","__webdriver_evaluate","__fxdriver_evaluate","__driver_unwrapped","__webdriver_unwrapped","__fxdriver_unwrapped","__webdriver_script_fn","__webdriver_script_func","__webdriver_script_function","$cdc_asdjflasutopfhvcZLmcf","$cdc_asdjflasutopfhvcZLmcfl_","$chrome_asyncScriptInfo","__$webdriverAsyncExecutor"]},n[c.HeadlessChrome]={window:["domAutomation","domAutomationController"]},n),o={},i=f(window),a=[];for(e in void 0!==window.document&&(a=f(window.document)),t){var s=t[e];if(void 0!==s){var u=void 0!==s.window&&p.apply(void 0,r([i],s.window,!1)),A=!(void 0===s.document||!a.length)&&p.apply(void 0,r([a],s.document,!1));o[e]=u||A}}return o}},x=function(){function n(){this.components=void 0,this.detections=void 0}return n.prototype.getComponents=function(){return this.components},n.prototype.getDetections=function(){return this.detections},n.prototype.getSources=function(){return B},n.prototype.getDetectors=function(){return w},n.prototype.detect=function(){if(void 0===this.components)throw new Error("BotDetector.detect can't be called before BotDetector.collect");var n=this.components,e=this.getDetectors(),t={},o={bot:!1};for(var r in e){var i=(0,e[r])(n),a={bot:!1};"string"==typeof i?a={bot:!0,botKind:i}:i&&(a={bot:!0,botKind:c.Unknown}),t[r]=a,a.bot&&(o=a)}return this.detections=t,o},n.prototype.collect=function(){return e(this,void 0,void 0,(function(){var n,t,r,i=this;return o(this,(function(c){switch(c.label){case 0:return n=this.getSources(),t={},r=Object.keys(n),[4,Promise.all(r.map((function(r){return e(i,void 0,void 0,(function(){var e,i,c,s,u;return o(this,(function(o){switch(o.label){case 0:e=n[r],o.label=1;case 1:return o.trys.push([1,3,,4]),i=t,c=r,u={},[4,e()];case 2:return i[c]=(u.value=o.sent(),u.state=a.Success,u),[3,4];case 3:return s=o.sent(),t[r]=s instanceof A?{state:s.state,error:"".concat(s.name,": ").concat(s.message)}:{state:a.UnexpectedBehaviour,error:s instanceof Error?"".concat(s.name,": ").concat(s.message):String(s)},[3,4];case 4:return[2]}}))}))})))];case 1:return c.sent(),this.components=t,[2,this.components]}}))}))},n}();const y=x;function k(n){var t=(void 0===n?{}:n).monitoring,r=void 0===t||t;return e(this,void 0,void 0,(function(){var n;return o(this,(function(e){switch(e.label){case 0:return r&&function(){if(!(window.__fpjs_d_m||Math.random()>=.001))try{var n=new XMLHttpRequest;n.open("get","https://m1.openfpcdn.io/botd/v".concat(i.i8,"/npm-monitoring"),!0),n.send()}catch(n){console.error(n)}}(),[4,(n=new y).collect()];case 1:return e.sent(),[2,n]}}))}))}var S=t(379),_=t.n(S),W=t(795),P=t.n(W),L=t(569),U=t.n(L),I=t(565),z=t.n(I),j=t(216),D=t.n(j),M=t(589),O=t.n(M),T=t(800),R={};R.styleTagTransform=O(),R.setAttributes=z(),R.insert=U().bind(null,"head"),R.domAPI=P(),R.insertStyleElement=D(),_()(T.Z,R),T.Z&&T.Z.locals&&T.Z.locals;var N=void 0,Y=function(){return e(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){switch(t.label){case 0:return[4,e(void 0,void 0,void 0,(function(){var n,e,t,r,i,a,c,s,u,A;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),n=performance.now(),[4,k()];case 1:return e=o.sent(),t=performance.now()-n,r=e.detect(),i=performance.now()-n,a=null!==(u=e.getComponents())&&void 0!==u?u:{},c=null!==(A=e.getDetections())&&void 0!==A?A:{},s={browserEngineKind:m(),browserKind:v(),documentFocus:E(),mozAppearanceSupport:C(),isAndroid:h(),isDesktopSafari:b()},[2,{isError:!1,collectionTime:t,detectionTime:i,detectionResult:r,detectedBot:(null==r?void 0:r.bot)?r.botKind:void 0,collectedData:a,detectorsResults:c,debugData:s}];case 2:return[2,{isError:!0,error:o.sent()}];case 3:return[2]}}))}))];case 1:return n=t.sent(),N=n,function(n){var e=document.getElementById("result"),t=document.getElementById("result-text"),o=document.getElementById("collection-time"),r=document.getElementById("detection-time"),i=document.getElementById("detection-result"),a=document.getElementById("detectors"),c=document.getElementById("debug-data"),s=document.getElementById("collected-data"),u=document.getElementById("error-container"),A=document.getElementById("error-message");if(e.classList.remove("result-detected","result-error"),n.isError)return t.innerHTML="An error occured",e.classList.add("result-error"),u.classList.add("error-container-visible"),void(A.textContent=n.error.message);u.classList.remove("error-container-visible"),null!=n.detectedBot?(t.innerHTML="".concat(n.detectedBot," detected."),e.classList.add("result-detected")):t.innerHTML="You are not a bot.",o.textContent="".concat(n.collectionTime.toFixed(2),"ms"),r.textContent="".concat(n.detectionTime.toFixed(2),"ms"),i.textContent=JSON.stringify(n.detectionResult,null,4),a.textContent=JSON.stringify(n.detectorsResults,null,4),c.textContent=JSON.stringify(n.debugData,null,4),s.textContent=JSON.stringify(n.collectedData,null,4)}(n),[2]}}))}))};window.onload=function(){var n=document.getElementById("detect-button"),e=document.getElementById("copy-logs-button");n.addEventListener("click",(function(){Y()})),e.addEventListener("click",(function(){navigator.clipboard.writeText(JSON.stringify(N)).then((function(){alert("BotD logs copied to clipboard")}))})),Y()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,